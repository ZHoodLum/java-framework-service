<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!--日志文件保存路径：默认当前项目所在的盘符目录下-->
    <property name="file_path" value="./logs"/>
    <!-- 定义日志文件名称:项目名 -->
    <property name="file_name" value="javaProactive2"/>
    <!-- 文件日志输出格式 -->
    <!--    <property name="file_pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} = [%thread] = [%-5level] = %logger{50} - [%method,%line] - %msg%n"/>-->
    <property name="file_pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %class{36} %L %M - %msg%n"/>
    <!-- 控制台日志输出格式 -->
    <!--    <property name="console_pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} = [%thread] = [%-5level] = %logger{25} - [%method,%line] - %msg%n"/>-->
    <property name="console_pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %class{36} %L %M - %msg%n"/>

    <!--控制台日志输出-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--调用：name的值-->
            <pattern>${console_pattern}</pattern>
        </encoder>
    </appender>

    <!--文件日志输出-->
    <appender name="file_log" class="ch.qos.logback.core.FileAppender">
        <!--日志保存路径+名称-->
        <file>${file_path}/${file_name}.log</file>
        <!--日志追加到末尾-->
        <append>true</append>
        <!--日志消息格式设置-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>


    <!--日志拆分和归档-->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="file_log" class="cn.bosc.msb.frame.boot.tracer.logback.rolling.BoscBusinessRollingFileAppender">
        <!--日志输出格式： -->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder" charset="utf-8">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout">
                <pattern>${file_pattern}</pattern>
            </layout>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤的级别:只接受ERROR错误 -->
            <level>APPLICATION_INFO_FILE</level>
            <!--匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!--不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${application.log.path}/${springAppName}_$Today_$IpEnd_error.log</file>
        <rollingPolicy class="cn.bosc.msb.frame.boot.tracer.logback.rolling.BoscBusinessSizeAndTimeBasedRollingPolicy">
            <!--        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
            <fileNamePattern>${file_path}/${file_name}_%d{yyyy-MM-dd}_$IpEnd_info.%i.tar.gz</fileNamePattern>
            <!--
              当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
              注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
              -->
            <maxFileSize>10MB</maxFileSize>
            <!--日志最大的历史 60天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!--日志拆分和归档压缩的 appender 对象-->
    <appender name="appLogAppender"
              class="cn.bosc.msb.frame.boot.tracer.logback.rolling.BoscBusinessRollingFileAppender">
        <!--日志输出格式： -->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder" charset="utf-8">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout">
                <pattern>${file_pattern}</pattern>
            </layout>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>APPLICATION_INFO_FILE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${application.log.path}/${springAppName}_$Today_$IpEnd_error.log</file>
        <!--指定拆分规则:按照文件大小-->
        <rollingPolicy class="cn.bosc.msb.frame.boot.tracer.logback.rolling.BoscBusinessSizeAndTimeBasedRollingPolicy">
            <!--按照时间和压缩格式声明拆分的文件名-->
            <fileNamePattern>${file_path}/${file_name}_%d{yyyy-MM-dd}_$IpEnd_info.%i.tar.gz</fileNamePattern>
            <maxFileSize>10MB</maxFileSize>
        </rollingPolicy>
    </appender>

    <!--异步日志-->
    <appender name="async" class="ch.qos.logback.classic.AsyncAppender">
        <!--指定某个具体的 appender-->
        <appender-ref ref="rollFile"/>
    </appender>

    <!--
      logger主要用于存放日志对象，也可以定义日志类型、级别
      name：用来指定受此loger约束的某一个包或者具体的某一个类。
      level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
      additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
      false：表示只用当前logger的appender-ref，
      true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
      -->
    <logger name="com" level="error" additivity="false">
        <appender-ref ref="console"/>
    </logger>
    <logger name="org.springframework" level="DEBUG" additivity="false"/>


    <!--
 	  root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
 	  要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
      root:如果有子logger将以子logger的level为基础-->
    -->
    <root level="ALL">
        <!--控制台-->
        <appender-ref ref="console"/>
        <!--文件-->
        <appender-ref ref="file_log"/>
        <!--按照文件大小归档-->
        <appender-ref ref="async"/>
        <!--按照日期归档-->
        <appender-ref ref="appLogAppender"/>
    </root>

</configuration>
